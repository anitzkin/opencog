/*
 * ForwardChainer.cxxtest
 *
 *  Created on: Sep 2, 2014
 *      Author: misgana
 */

#include <opencog/reasoning/engine/forwardchainer/ForwardChainer.h>
#include <opencog/reasoning/engine/forwardchainer/DefaultForwardChainerCB.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>

#include <boost/range/algorithm/find.hpp>

using namespace opencog;

class ForwardChainerUTest: public CxxTest::TestSuite {
private:
	ForwardChainer * fc_;
	SchemeEval* eval_;
	AtomSpace * as_;

public:
	ForwardChainerUTest()
	{
		server(CogServer::createInstance);
		as_ = &cogserver().getAtomSpace();
		eval_ = new SchemeEval(as_);

		// Disable the AF mechanism during testing!
		as_->setAttentionalFocusBoundary(AttentionValue::MINSTI);
		config().set("SCM_PRELOAD",
		             "opencog/atomspace/core_types.scm, "
		             "opencog/scm/utilities.scm, "
		             "opencog/scm/av-tv.scm");
		cogserver().loadSCMModules();
		fc_ = new ForwardChainer(as_);
	}
	~ForwardChainerUTest() {
		delete as_;
		delete eval_;
	}
	void test_do_chain();
};

void ForwardChainerUTest::test_do_chain()
{
	// Test simple deduction
	//
	// InheritanceLink A B
	// InheritanceLink B C
	// |-
	// InheritanceLink A C
	Handle A = eval_->eval_h("(ConceptNode \"A\" (stv 0.2 0.9))"),
		B = eval_->eval_h("(ConceptNode \"B\" (stv 0.3 0.9))"),
		C = eval_->eval_h("(ConceptNode \"C\" (stv 0.1 0.9))"),
		AB = eval_->eval_h("(InheritanceLink (stv 0.9 0.9)"
		                   "    (ConceptNode \"A\")"
		                   "    (ConceptNode \"B\"))"),
		BC = eval_->eval_h("(InheritanceLink (stv 0.8 0.9)"
		                   "    (ConceptNode \"B\")"
		                   "    (ConceptNode \"C\"))");

	// Run forward chainer (and remove problematic rules)
	DefaultForwardChainerCB dfc(as_);
	vector<Rule*>& rules = fc_->_fcmem.get_rules();
	vector<std::string> ignore = {
		"pln-rule-create-and-as-1st-arg-of-inheritance",
		"pln-rule-create-and-as-2nd-arg-of-inheritance",
		"pln-rule-contextualize-inheritance"
	};
	for (auto it = rules.begin(); it != rules.end();) {
		if (boost::find(ignore, (*it)->get_name()) != ignore.end())
			it = rules.erase(it);
		else
			++it;
	}
	fc_->do_chain(dfc, AB);

	// Collect the results
	HandleSeq results = fc_->get_chaining_result();
	std::cout << "do_chain results:" << std::endl;
	for (Handle h : results)
		std::cout << h->toString() << std::endl;

	// Check that AC is in the results
	Handle AC = as_->addLink(INHERITANCE_LINK, A, C);
	TS_ASSERT_DIFFERS(find(results.begin(), results.end(), AC), results.end());
}
