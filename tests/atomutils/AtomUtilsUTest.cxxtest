/*
 * tests/atomspace/AtomUtilsUTest.cxxtest
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomutils/AtomUtils.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class AtomUtilsUTest :  public CxxTest::TestSuite
{
private:

public:
    AtomUtilsUTest()
    {
        logger().setPrintToStdoutFlag(true);
    }

	void test_get_distant_neighbors();
	void test_get_outgoing_nodes();
	void test_get_predicates();
	void test_get_predicates_for();
};

// Test get_distant_neighbors()
void AtomUtilsUTest::test_get_distant_neighbors()
{
	// Fill atomspace
	AtomSpace as;
	Handle A = as.addNode(CONCEPT_NODE, "A"),
		B = as.addNode(CONCEPT_NODE, "B"),
		C = as.addNode(CONCEPT_NODE, "C"),
		D = as.addNode(CONCEPT_NODE, "D"),
		AB = as.addLink(INHERITANCE_LINK, A, B),
		BC = as.addLink(INHERITANCE_LINK, B, C),
		CD = as.addLink(INHERITANCE_LINK, C, D);

	// Test neighbors at distance 1 of A
	TS_ASSERT_EQUALS(get_distant_neighbors(A, 1),
	                 UnorderedHandleSet({AB}));

	// Test neighbors at distance 1 of AB
	TS_ASSERT_EQUALS(get_distant_neighbors(AB, 1),
	                 UnorderedHandleSet({A, B}));

	// Test neighbors at distance 2 of AB
	TS_ASSERT_EQUALS(get_distant_neighbors(AB, 2),
	                 UnorderedHandleSet({A, B, BC}));

	// Test all neighbors of AB
	TS_ASSERT_EQUALS(get_distant_neighbors(AB, -1),
	                 UnorderedHandleSet({A, B, C, D, BC, CD}));
}

// Test get_outgoing_nodes()
void AtomUtilsUTest::test_get_outgoing_nodes()
{
	AtomSpace as;
	Handle A = as.addNode(CONCEPT_NODE, "A"),
		B = as.addNode(CONCEPT_NODE, "B"),
		P = as.addNode(PREDICATE_NODE, "P"),
		AB = as.addLink(INHERITANCE_LINK, A, B),
		ABP = as.addLink(LIST_LINK, AB, P);

	// Get all nodes from ABP
	TS_ASSERT_EQUALS(get_outgoing_nodes(ABP),
	                 UnorderedHandleSet({A, B, P}));

	// Get all concept nodes from ABP
	TS_ASSERT_EQUALS(get_outgoing_nodes(ABP, {CONCEPT_NODE}),
	                 UnorderedHandleSet({A, B}));

	// Get all predicate nodes from ABP
	TS_ASSERT_EQUALS(get_outgoing_nodes(ABP, {PREDICATE_NODE}),
	                 UnorderedHandleSet({P}));
}

// Test get_outgoing_nodes()
void AtomUtilsUTest::test_get_predicates()
{
	AtomSpace as;
	Handle
		programmer = as.addNode(CONCEPT_NODE, "programmer"),
		bacon = as.addNode(CONCEPT_NODE, "bacon"),
		programmer_bacon = as.addLink(LIST_LINK, programmer, bacon),
		eats = as.addNode(PREDICATE_NODE, "eats"),
		programmerEatsBacon = as.addLink(EVALUATION_LINK, eats,
										programmer_bacon),
		lover = as.addNode(DEFINED_RELATIONSHIP_NODE, "lover"),
		programmerBaconLover = as.addLink(EVALUATION_LINK, lover,
										 programmer_bacon),
		anotherNode = as.addNode(CONCEPT_NODE, "pigs"),
		anotherLink = as.addLink(LIST_LINK, anotherNode, bacon);
		
	// Test get_predicates(default).
	HandleSeq baconReferences {programmerEatsBacon, programmerBaconLover};
	TS_ASSERT_EQUALS(get_predicates(bacon), baconReferences);

	// Test get_predicates with specific type.
	HandleSeq baconLovers {programmerBaconLover};
	TS_ASSERT_EQUALS(get_predicates(bacon, DEFINED_RELATIONSHIP_NODE), 
					 baconLovers);

	// Test get_predicates with specific type and no subclasses.
	HandleSeq eatersOfBacon {programmerEatsBacon};
	TS_ASSERT_EQUALS(get_predicates(bacon, PREDICATE_NODE, NO_SUBCLASSES),
	                 eatersOfBacon);
}

// Test get_outgoing_nodes()
void AtomUtilsUTest::test_get_predicates_for()
{
	AtomSpace as;
	Handle
		// Dog is a mammal, canine, animal.
		dog = as.addNode(CONCEPT_NODE, "dog"),
		mammal = as.addNode(CONCEPT_NODE, "mammal"),
		dog_mammal = as.addLink(LIST_LINK, dog, mammal),
		canine = as.addNode(CONCEPT_NODE, "canine"),
		dog_canine = as.addLink(LIST_LINK, dog, canine),
		animal = as.addNode(CONCEPT_NODE, "animal"),
		dog_animal = as.addLink(LIST_LINK, dog, animal),
		isA = as.addNode(PREDICATE_NODE, "IsA"),
		dogIsAMammal = as.addLink(EVALUATION_LINK, isA, dog_mammal),
		dogIsACanine = as.addLink(EVALUATION_LINK, isA, dog_canine),
		dogIsAAnimal = as.addLink(EVALUATION_LINK, isA, dog_animal),

		// Dog eats bacon.
		bacon = as.addNode(CONCEPT_NODE, "bacon"),
		dog_bacon = as.addLink(LIST_LINK, dog, bacon),
		eats = as.addNode(PREDICATE_NODE, "eats"),
		dogEatsBacon = as.addLink(EVALUATION_LINK, eats, dog_bacon),

		// Programmer eats bacon.
		programmer = as.addNode(CONCEPT_NODE, "programmer"),
		programmer_bacon = as.addLink(LIST_LINK, programmer, bacon),
		programmerEatsBacon = as.addLink(EVALUATION_LINK, eats, programmer_bacon);
		
	// Test for dog IsA.
	HandleSeq dogIsA {dogIsAMammal, dogIsACanine, dogIsAAnimal};
	TS_ASSERT_EQUALS(get_predicates_for(dog, isA), dogIsA);

	// Test for dog eats.
	HandleSeq dogEats {dogEatsBacon};
	TS_ASSERT_EQUALS(get_predicates_for(dog, eats), dogEats);

	// Test for programmer eats.
	HandleSeq programmerEats {programmerEatsBacon};
	TS_ASSERT_EQUALS(get_predicates_for(programmer, eats), programmerEats);

	// Test for eats bacon.
	HandleSeq eatsBacon {dogEatsBacon, programmerEatsBacon};
	TS_ASSERT_EQUALS(get_predicates_for(bacon, eats), eatsBacon);
}

